{"meta":{"title":"Simply Ian","subtitle":"A blog on software, technology, and life.","description":"The personal blog of Ian Macalinao, a software developer, designer, and entrepreneur from Dallas, Texas.","author":"Ian Macalinao","url":"https://simplyian.com"},"pages":[],"posts":[{"title":"Ruby WTF? Escaping single quotes in Ruby using gsub","slug":"Ruby-WTF-Escaping-single-quotes-in-Ruby-using-gsub","date":"2015-10-19T15:59:27.000Z","updated":"2015-11-07T04:53:18.000Z","comments":true,"path":"2015/10/19/Ruby-WTF-Escaping-single-quotes-in-Ruby-using-gsub/","link":"","permalink":"https://simplyian.com/2015/10/19/Ruby-WTF-Escaping-single-quotes-in-Ruby-using-gsub/","excerpt":"","text":"I’m currently working on a project which requires me to escape JavaScript (don’t ask why). To get it working, I had to escape single quotes. I was encountering weird behavior in my code, so I ran the following in IRB. 122.2.1 :002 &gt; \"Doesn't work\".gsub(\"'\", \"\\\\'\") =&gt; \"Doesnt workt work\" WAT. I did a bit of investigation (read: Stack Overflow) and found that \\&#39; is a special escape sequence in the gsub replacement — it’s a backreference that represents $&#39;, the characters that match after the single quote. In order to fix this bug, you must escape the backslash within gsub as so: 122.2.1 :003 &gt; \"Doesn't work\".gsub(\"'\", \"\\\\\\\\'\") =&gt; \"Doesn\\\\'t work\" Nota bene: The double backslash returned by IRB is actually a single escaped backslash — it hasn’t generated another one. gsub first escapes everything as a Ruby string, then it parses the result of that string as a regex. It’s not documented well at all — I couldn’t find anything on this in the documentation. Ruby’s such a weird language.","raw":null,"content":null,"categories":[],"tags":[{"name":"Ruby","slug":"Ruby","permalink":"https://simplyian.com/tags/Ruby/"}]},{"title":"The benefit of destructuring function arguments in ES6","slug":"The-benefit-of-destructuring-function-arguments-in-ES6","date":"2015-09-28T20:32:27.000Z","updated":"2015-09-28T20:44:52.000Z","comments":true,"path":"2015/09/28/The-benefit-of-destructuring-function-arguments-in-ES6/","link":"","permalink":"https://simplyian.com/2015/09/28/The-benefit-of-destructuring-function-arguments-in-ES6/","excerpt":"","text":"ES6 brings a lot of great features to JavaScript to make it a much more modern and powerful language to work with. The days of “JavaScript sucks because it was only built in a week” have passed. One really great feature in ES6 is destructuring. In statically typed languages, one can easily know what arguments are needed in a function by the types passed into it. For example, in Java, the following function definition is very clear: 1public void sendMessage(Target target, String message); It’s obvious that the receiver of a message should be a target. In a modern IDE, calls like sendMessage(user, msg) would obviously send messages to a Target, as it is known that user would be part of a certain class. However, in JavaScript or other dynamically typed languages, things are a little harder to decipher. user may be a user id, a user object, a username, etc. Furthermore, user is a variable name, so literally anything can be passed in. A call like sendMessage(first, s) can be tricky to understand. It’s also pretty easy to swap the positions of variables, and there is no compiler to check if you are sending in the correct arguments. The SolutionOne way I’ve found to solve this problem using ES6 is function argument destructuring. In ES5, a function may look like this: 123function sendMessage(target, msg) &#123; /* ... */ &#125;sendMessage(usr, \"Hello\"); The same function using argument destructuring would look like this: 123function sendMessage(&#123; target, msg &#125;) &#123; /* ... */ &#125;sendMessage(&#123; target: usr, msg: \"Hello\" &#125;); Intent is much more clear in the second version than the first. This is very useful if you have many arguments to functions. If some are optional, you don’t even have to pass in every single argument, as arguments are not positional. For example: 12345function sendMessage(&#123; target, msg, notifySms = false, notifyEmail = false &#125;) &#123; /* ... */ &#125;sendMessage(&#123; target: usr, msg: \"Hello\" &#125;);sendMessage(&#123; target: other, msg: \"Look at your phone\", notifySms: true &#125;);sendMessage(&#123; target: other, msg: \"Look at your email\", notifyEmail: true &#125;); Now you can easily pass options into your functions without function calls having a lot of falsy/nil values.","raw":null,"content":null,"categories":[],"tags":[{"name":"es6","slug":"es6","permalink":"https://simplyian.com/tags/es6/"},{"name":"javascript","slug":"javascript","permalink":"https://simplyian.com/tags/javascript/"}]},{"title":"Doing homework assignments in Markdown using Pandoc and LaTeX","slug":"Doing-homework-assignments-in-Markdown-using-Pandoc-and-LaTeX","date":"2015-09-13T14:57:43.000Z","updated":"2015-09-13T15:22:14.000Z","comments":true,"path":"2015/09/13/Doing-homework-assignments-in-Markdown-using-Pandoc-and-LaTeX/","link":"","permalink":"https://simplyian.com/2015/09/13/Doing-homework-assignments-in-Markdown-using-Pandoc-and-LaTeX/","excerpt":"","text":"Markdown is a really awesome format for text and prose. It’s really easy to manage in any text editor, and it’s quick to write. It has a lot of features, including bolding, italicizing, lists, quotes, embedded code, and more. It’s so easy to write that it’s the “language” of choice for many major websites such as StackOverflow and Reddit, it being much easier to implement and looking nicer than a WYSIWYG text editor. I’m even writing this blog post using Markdown. However, you can’t really send someone a Markdown document. It’s meant to be processed into a more readable format, most usually HTML. LaTeX is a great tool for typesetting text. It has a lot of flexibility and standardizes how documents look. It’s so powerful that it has become the defacto tool to create research papers. However, there is definitely a learning curve in using the software, and the source doesn’t look very nice. Pandoc brings the best of both worlds. It allows conversion of Markdown to a predefined LaTeX template, allowing you to use Markdown to write LaTeX documents in a format that works out 99% of the time if you’re just writing notes or submitting a linear homework assignment. Usage is simple: 1pandoc input.md -o output.(pdf|tex) This generates either a .tex or .pdf (compiled LaTeX) file that looks pretty good using the default settings. Generating PDFs quicklySince I use Markdown so much to generate PDFs, I’ve created the following shell function: 123md2pdf() &#123; pandoc $1 -o `basename $1 .md`.pdf&#125; You can add this to your .bashrc or .zshrc to add a command like follows: 1md2pdf filename.md This will generate a file named filename.pdf in your present working directory. You can use file watching tools to automatically generate a PDF and leave it open/refreshing in your PDF reader. I personally use a tool called entr(1), which can be installed via Homebrew. Writing equationsYou may want to insert some math into your document. You can do this by surrounding your math in dollar signs ($) and writing in LaTeX form, for example: 1## Euler&#39;s identity&#10;Below is Euler&#39;s identity.&#10;&#10;$e^&#123;i\\pi&#125; + 1 = 0$&#10;&#10;Lorem ipsum dolor sit amet... This produces the equation inline. Documentation for this feature of Pandoc is pretty spotty — if you know of more ways to embed LaTeX equations in Pandoc-generated documents, please let me know! Setting everything upAll of the tools mentioned can be installed via Homebrew. 12brew install entr pandocbrew cask install mactex Writing Markdown instead of LaTeX allows me to iterate faster on my homework/notes and lets me worry more about my content than the formatting of my sections and subsections. It’s really easy to set everything up, and as a Vim user, it has increased my productivity quite a bit. I hope you find my workflow as useful as I have!","raw":null,"content":null,"categories":[],"tags":[{"name":"latex","slug":"latex","permalink":"https://simplyian.com/tags/latex/"},{"name":"markdown","slug":"markdown","permalink":"https://simplyian.com/tags/markdown/"},{"name":"pandoc","slug":"pandoc","permalink":"https://simplyian.com/tags/pandoc/"}]},{"title":"Using form-horizontal with simple_form in Rails 4","slug":"Using-form-horizontal-with-simple-form-in-Rails-4","date":"2015-04-23T19:14:44.000Z","updated":"2015-04-23T19:18:54.000Z","comments":true,"path":"2015/04/23/Using-form-horizontal-with-simple-form-in-Rails-4/","link":"","permalink":"https://simplyian.com/2015/04/23/Using-form-horizontal-with-simple-form-in-Rails-4/","excerpt":"","text":"simple_form is a really great gem for generating bootstrap forms. However, you have todo a little extra to get it working with Bootstrap’s form-horizontal class. TheREADME doesn’t mention this, but it’s built in. Just write your form declaration like this: 123456&lt;%= simple_form_for [:admin, @c], html: &#123; class: 'form-horizontal' &#125;, wrapper: :horizontal_form do |f| %&gt;# ...form...&lt;% end %&gt; Note the wrapper attribute. This isn’t described in the README, and I had to dig through thecode to figure it out. Hope this helps someone!","raw":null,"content":null,"categories":[],"tags":[{"name":"rails","slug":"rails","permalink":"https://simplyian.com/tags/rails/"},{"name":"web","slug":"web","permalink":"https://simplyian.com/tags/web/"}]},{"title":"How to skip all Yaourt prompts on Arch Linux","slug":"How-to-skip-all-Yaourt-prompts-on-Arch-Linux","date":"2015-02-15T22:39:31.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2015/02/15/How-to-skip-all-Yaourt-prompts-on-Arch-Linux/","link":"","permalink":"https://simplyian.com/2015/02/15/How-to-skip-all-Yaourt-prompts-on-Arch-Linux/","excerpt":"","text":"Yaourt is probably the best tool to automatically download and install packages from the Arch User Repository, also known as AUR. It’s really powerful; however, by default, it prompts you a LOT for confirmations of different things, such as checking if you want to install something, if you want to edit the PKGBUILD, etc. As a result, Yaourt is pretty annoying if you’re used to the hands-free nature of most other package managers. As it turns out, there is a file you can create called ~/.yaourtrc that can change the behavior of Yaourt. To turn off all of the prompts, type the following into a new file called ~/.yaourtrc: 123NOCONFIRM=1BUILD_NOCONFIRM=1EDITFILES=0 The first line will skip the messages confirming if you really want to install the package. The second line will skip the messages asking you if you want to continue the build. The third and last line will skip the messages asking if you want to edit the PKGBUILD files. When you’re done doing this, Yaourt should now stop being a pain to use. Have fun with your hands-free installs!","raw":null,"content":null,"categories":[],"tags":[{"name":"arch","slug":"arch","permalink":"https://simplyian.com/tags/arch/"},{"name":"linux","slug":"linux","permalink":"https://simplyian.com/tags/linux/"}]},{"title":"Why hard work doesn't matter","slug":"Why-hard-work-doesn-t-matter","date":"2015-02-03T16:47:19.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2015/02/03/Why-hard-work-doesn-t-matter/","link":"","permalink":"https://simplyian.com/2015/02/03/Why-hard-work-doesn-t-matter/","excerpt":"","text":"Hard work pays off. That expression is always said in today’s society, and it’s considered a good trait to have. However, many people every day work hard, yet they still find themselves struggling to pay bills or live. I don’t believe that hard work is what you should strive for. Rather, it should be valuable work. W = FdIf you still remember high school, you might remember the equation for work: Work = Force * Distance The time your work takes can be thought of like the distance component. Time is constant for everyone; everyone has it in the same amount and can choose however to spend it. We all have the same distance in the work equation. Putting a lot of time into something equates to hard work. The actual value of your time can be thought of like the force component. Just like you can apply more force when lifting something, you can learn different skills to increase how much your time work; e.g. you could learn iOS development in order to become more well rounded in order to get better jobs. Finally, the work component refers to the value of your work; it is the amount of work you output based on your time and the value of your time, the product of force times distance. Bounds to time and value of timeTime is bounded by the laws of the universe: you can only put 24 hours a day into something. You could work extremely hard, yet there is a limit to how hard you can work. On the other hand, value of time is unbounded: you can always get better at a skill or hire more people. You can end up like Mark Zuckerberg, where you’re the CEO of one of the biggest technology companies in the world and just tell people what to do, and your time is extremely valuable. Despite working extremely hard, if the value of your time is low, you won’t be able to work hard enough in order to get where you want to be. However, if you focus on maximizing the value of your time, the possibilities are limitless. Focus on increasing how good you are and how valuable you are as a person rather than spending all of your time on menial tasks just to get quick money, especially if you’re currently in school.","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Why abstraction is important when constructing algorithms","slug":"Why-abstraction-is-important-when-constructing-algorithms","date":"2015-02-02T15:09:16.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2015/02/02/Why-abstraction-is-important-when-constructing-algorithms/","link":"","permalink":"https://simplyian.com/2015/02/02/Why-abstraction-is-important-when-constructing-algorithms/","excerpt":"","text":"In order to get better at algorithms (my greatest weakness), I’m currently going through the Stanford algorithm design course. To learn the concepts better, I decided to implement Karatsuba multiplication in JavaScript. (The fruits of my labor can be found on my miscellaneous algorithm GitHub repository.). This algorithm, only 43 lines, took me about an hour to code. I already knew the details of the algorithm from the video. Why? Because I was prepending the wrong number of zeroes to the number when figuring out where to split the number. Why was this happening? Originally, my prependZeroes method was being done inline, and I wasn’t testing it properly. Abstraction is important because you can test individual parts of an algorithm to make sure they are correct so you can figure out where your algorithm is failing. It also allows your code to be more symmetrical, making it a lot easier to follow. If I had abstracted the prependZeroes method and had written unit tests for that method specifically, this algorithm would have been much faster to write. Instead, I wasted a ton of time writing console.log statements in order to figure out where my bug was. Break algorithms up into as many functions/parts as possible, so you can test your algorithms much more easily.","raw":null,"content":null,"categories":[],"tags":[{"name":"programming","slug":"programming","permalink":"https://simplyian.com/tags/programming/"}]},{"title":"The real reason why Caps Lock and Escape are in terrible positions","slug":"The-real-reason-why-Caps-Lock-and-Escape-are-in-terrible-positions","date":"2015-01-08T19:41:08.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2015/01/08/The-real-reason-why-Caps-Lock-and-Escape-are-in-terrible-positions/","link":"","permalink":"https://simplyian.com/2015/01/08/The-real-reason-why-Caps-Lock-and-Escape-are-in-terrible-positions/","excerpt":"","text":"It is a truth universally acknowledged that the Caps Lock key is completely useless. I use it about once or twice a year, and that definitely does not warrant it a spot right next to my pinky finger on the home row. It’s in a place that is just as convenient as the Enter key, despite being completely useless. Conversely, the Escape key is extremely useful. I use it when watching full screen videos on YouTube, closing chats on Facebook, and using commands in Vim. However, it often is in the worst spot possible to be used extremely frequently: the top left of the keyboard. And on many laptops, it’s tiny. For heavy escape users, this is an incredible boon to productivity. How Caps Lock got its prominent positionBack in the days of the typewriter, the Shift key basically shifted some mechanisms in the typewriter to allow you to type another set of characters, usually uppercase. “Shift Lock” was a toggle that basically kept the keyboard in shifted position, and it was located in the same position that Caps Lock is located on most keyboards today. When the days of computing came around, Caps Lock was moved to where the Control key now is, and the Control key was placed in the location of Caps Lock. However, the Control key was inconvenient to former typewriter users and mainframe users, and the Caps Lock key was moved pack to its original position on the 101 Enhanced Keyboard by IBM. This 101 Enhanced Keyboard soon became the de-facto standard for keyboard layouts, which is why our keyboards have this Caps Lock positioning. More info on the 101 Enhanced Keyboard can be found here. How the Escape key was placed in the worst possible positionMeanwhile, the Escape key was placed on the very far top left on the keyboard, meant to be used as much as much as the function keys. It was created in the 1960’s to allow programmers to switch from one type of code to another. However, once this made no sense for the general user, Windows began using the key to close dialogs, mostly to mean “Stop”. Other operating systems followed, and Escape became the key to exit or suspend the program in some sort of way. Why Vi uses the Escape key to switch modesIf you’re a Vi/Vim user, you probably use the Escape key quite a bit. It’s necessary to be able to any of the features of the program, and you’ll probably find yourself hitting it at least twice per minute. The positioning doesn’t make sense however, as it’s in such an awkward spot. Why not the Control key? Or the Alt key? Vi was built for a keyboard where Escape was in the position of Tab and Control was in the position of Caps Lock: the ADM-3A. This is an incredibly convenient position. You don’t have to move your hand in order to hit the key, and the key is big, unlike the tiny squares on a current laptop keyboard. It’s too bad that keyboards aren’t built like that today. Solutions?On Chromebooks, you can change your keyboard settings to map the “Search” button to the Escape key. The easiest and cheapest solution is to swap Caps Lock and Escape. On systems running the X Window System, you can put the following into ~/.Xmodmap. 12345! Swap caps lock and escaperemove Lock = Caps_Lockkeysym Escape = Caps_Lockkeysym Caps_Lock = Escapeadd Lock = Caps_Lock There are many other solutions on how to do this, but the above is the one I currently use as a Linux user. However, you still have the issue of mislabeled keys. Additionally, this fix does not work on Windows. There are several keyboards out there that you can purchase that have the keys in a nice spot, e.g. the Happy Hacking Keyboard. However, they’re usually a bit expensive as they’re produced in very limited quantities due to the low demand. Caps Lock and Escape were designed in a time where we didn’t have many of the tools we have today. They’re relics of the past that have carried on throughout computing history.","raw":null,"content":null,"categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"https://simplyian.com/tags/vim/"}]},{"title":"Hacking Gmail to use custom domains for free","slug":"Hacking-GMail-to-use-custom-domains-for-free","date":"2015-01-07T19:00:22.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2015/01/07/Hacking-GMail-to-use-custom-domains-for-free/","link":"","permalink":"https://simplyian.com/2015/01/07/Hacking-GMail-to-use-custom-domains-for-free/","excerpt":"","text":"It’s pretty much common knowledge that Gmail is awesome. It’s fast, connects seamlessly with the rest of your Google services such as Drive, has a cool app called Inbox, and is overall an extremely powerful email service. However, to use it with a custom domain, you need to purchase Google Apps for either $5 or $10/month, which for casual users is a bit unnecessary. On top of that, you don’t even get all of the features a personal account gets, e.g. Inbox. However, there’s a free way to use your Gmail account with a custom domain: Mailgun. Mailgun advertises itself as a set of “powerful APIs that enable you to send, receive and track email effortlessly.” Reading that description, you may be wondering how a developer tool could allow you to use Gmail with custom domains for free. Basically, Mailgun has two components that allow you to do this: an email forwarding service and an SMTP server. SetupFirst, sign up with Mailgun using your Gmail email. Do not use your email with your custom domain, as it will cause problems later when you want to verify your account. Once you have clicked the confirm link, log in to the Mailgun website. You should be presented with a dashboard. Now on the right under “Custom Domains”, click “Add Domain”. Follow the instructions and set your DNS records with whoever manages your DNS. Once you’ve done this, click on the “Routes” link on the top to set up email forwarding. Forwarding On this page, you want to click “Create New Route”. Then, on this page, enter the following information: Replace the emails within the quotation marks with the desired emails. Sending with SMTPNext, we will set up our SMTP configuration so we can send emails from an actual server. Underneath the “Domains” tab, click on your domain name. On this page, click “Manage your SMTP credentials” then “New SMTP Credential” on the next page. Type in the desired SMTP credentials. Next, go to the Accounts tab in your Gmail Settings and click “Add another email address you own”. Once you open this window, enter the email address you wish to send from. Then, set the SMTP settings as follows. Server: smtp.mailgun.org Port: 587 Username: The full email address, e.g. “me@ian.pw” Password: Whatever you set in Mailgun After clicking “Add Account”, now you’re done! Enjoy your free email service for up to 10,000 emails a month!","raw":null,"content":null,"categories":[],"tags":[{"name":"frugal","slug":"frugal","permalink":"https://simplyian.com/tags/frugal/"},{"name":"gmail","slug":"gmail","permalink":"https://simplyian.com/tags/gmail/"},{"name":"hack","slug":"hack","permalink":"https://simplyian.com/tags/hack/"},{"name":"mailgun","slug":"mailgun","permalink":"https://simplyian.com/tags/mailgun/"}]},{"title":"Creating a Todo app on the MEAN stack using Preston","slug":"Creating-a-Todo-app-on-the-MEAN-stack-using-Preston","date":"2014-12-21T00:34:19.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/12/20/Creating-a-Todo-app-on-the-MEAN-stack-using-Preston/","link":"","permalink":"https://simplyian.com/2014/12/20/Creating-a-Todo-app-on-the-MEAN-stack-using-Preston/","excerpt":"","text":"Preston is an extremely powerful library for creating RESTful applications that use Mongoose models. In this tutorial, I’ll be hooking up the AngularJS TodoMVC app to a Preston-powered backend. First, I’ve created a repo that is based off of the AngularJS Todo app. You can clone the first step like so: 12git clone https://github.com/simplyianm/todomvc-preston-angular.gitgit checkout angular This is the TodoMVC app with a few changes for simplicity: It uses a CDN rather than Bower. It uses Express to serve the app rather than being static HTML. This makes the differences between pure Angular to Angular+Preston much more pronounced. BackendTo create our backend, we must first install Mongoose, Preston, and body-parser like so: 1npm install --save preston mongoose Once this is done, we’re ready to start writing the code for our app. We’ll write all of our backend code in app.js. First, let’s require Mongoose and Preston, so we can use them in our code. 12var mongoose = require('mongoose');var preston = require('preston'); Next, let’s connect to our MongoDB database. I’m using MongoHQ since this will be on Heroku, but you can use whatever MongoDB database you want. 1mongoose.connect(process.env.MONGOHQ_URL || 'mongodb://localhost:27017'); Once Mongoose is connected, let’s define our model for our todos. We can define it like so: 1234var Todo = mongoose.model('Todo', new mongoose.Schema(&#123; title: String, completed: Boolean&#125;)); Next, let’s add Preston into this. There are only three lines of code needed to create a fully functional JSON RESTful backend with Preston: 123app.use(require('body-parser').json());preston(Todo);app.use('/api', preston.middleware()); The first line of code is required to parse the JSON request bodies which Preston depends on. The second line of code tells Preston that we want to create routes for the Todo model. By default, all 5 methods (query, create, get, update, destroy) are exposed with full access. *Note: if you don’t want this in your own application, Preston has the power to control what gets sent in every one of those methods. Read the docs for more details. The last line tells Express to serve any registered models on the /api route. Thus, routes under /api/todos are created. We’re going to add one more line of code to show what routes are created, for the sake of example: 1preston.printRoutes(); This just prints all generated routes, without their prefixes. Frontend (Angular)Fortunately, most of the AngularJS app is done. The TodoMVC example provides a sample connection to a sample RESTful backend (like ours). This is part of what makes Preston so powerful — it speaks the universal language of REST. There are tons of libraries out there to interface with REST: Restangular, restmod, etc. To get the frontend working, you must populate the todos list and ignore the 404 check. You can do this with the following: In client/js/services/todoStorage.js, make the todoStorage factory return the following: 1return $injector.get('api'); In client/js/app.js, make the resolve.store function return todoStorage. Furthermore, add the following to TodoCtrl: 12345$http.get('/api/todos').then(function(data) &#123; data.data.map(function(todo) &#123; store.todos.push(todo); &#125;);&#125;); Don’t forget to inject $http into the controller. The entire diff of these changes can be found here. If you were too lazy to follow this tutorial, you can also type git checkout master into your terminal to get to the latest version. If you’re hosting the app on Heroku, you’ll also need to type heroku addons:add mongohq to get a database hooked up to your code. The entire backend is now hooked up to Angular with little effort. Try it here! ConclusionPreston is a very powerful tool when used in conjunction with AngularJS. It can decrease the time it takes to get from idea to MVP significantly, as the backend code needed is extremely minimal. Preston solves the problem of creating a bunch of routes for your database whenever you need to create a model, as Preston just creates the most optimal routes and knows what you want. In the future, I’ll write about using Preston with Restangular, as the combination is even more powerful than using $http alone.","raw":null,"content":null,"categories":[],"tags":[{"name":"MEAN","slug":"MEAN","permalink":"https://simplyian.com/tags/MEAN/"},{"name":"Node.js","slug":"Node-js","permalink":"https://simplyian.com/tags/Node-js/"},{"name":"preston","slug":"preston","permalink":"https://simplyian.com/tags/preston/"},{"name":"rest","slug":"rest","permalink":"https://simplyian.com/tags/rest/"}]},{"title":"Getting Django To Work With Vagrant","slug":"getting-django-to-work-with-vagrant","date":"2014-11-10T19:13:35.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/11/10/getting-django-to-work-with-vagrant/","link":"","permalink":"https://simplyian.com/2014/11/10/getting-django-to-work-with-vagrant/","excerpt":"","text":"I was having problems getting Django working with Vagrant, then I stumbled upon this StackOverflow answer. The problem with the port forwarding is not with Vagrant, but with Django itself. You need to bind to 0.0.0.0, not 127.0.0.1. So you’d run this command: 1python migrate.py runserver 0.0.0.0:8000 That will fix all of your issues.","raw":null,"content":null,"categories":[],"tags":[]},{"title":"The Coffeescript Keyword Nobody's Heard Of: 'by'","slug":"the-coffeescript-keyword-nobodys-heard-of-by","date":"2014-11-04T14:22:44.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/11/04/the-coffeescript-keyword-nobodys-heard-of-by/","link":"","permalink":"https://simplyian.com/2014/11/04/the-coffeescript-keyword-nobodys-heard-of-by/","excerpt":"","text":"Coffeescript is an amazing language. As a matter of fact, it’s one of my favorite languages, second only to JavaScript. Here’s some recent code I used to split up one array into a multidimensional array with a certain number of columns. 1matrix.push arr[i..(i + cols - 1)] for i in [0..arr.length - 1] by cols Notice the second to last keyword: by. The by keyword basically changes the increment of the generated for loop. Without the by, you’d have i++ as the increment of your for loop. However, with the by, you’d instead have i += 3 if you had by 3. Here’s a simple example where I am getting money out of my bank account in the form of 5 dollar bills. 1console.log \"I have #&#123;i&#125; dollars.\" for i in [0..100] by 5 This translates to the following Javascript: 1234var i;for (i = 0; i &lt;= 100; i += 5) &#123; console.log(\"I have \" + i + \" dollars.\");&#125; As you can see, the increment of the loop is now 5 rather than just 1. Now the question is, are there any other hidden features of Coffeescript like this?","raw":null,"content":null,"categories":[],"tags":[]},{"title":"JSON Backends Are The Next Big Thing","slug":"json-backends-are-the-next-big-thing","date":"2014-08-07T17:19:32.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/08/07/json-backends-are-the-next-big-thing/","link":"","permalink":"https://simplyian.com/2014/08/07/json-backends-are-the-next-big-thing/","excerpt":"","text":"AngularJS is an awesome web framework made by Googleto create “structured web apps”. In this framework, templating is done client-side,so all the server needs to do is send data to the client via HTTP. Thus, no templatingneeds to be done on the backend and the web browser handles all of the data.All the backend needs to do is send JSON. This is awesome. Why? Because data is now separate from the view. Model-View-Controller, or MVC forshort, has long been a standard of developing web applications as it organizes codein a way that just makes sense. A controller takes a request and serves a model, thedata, and a view, which formats the data into a nice format. However, since the introduction of the iPhone, web isn’t all we have to worry about.Mobile apps are becoming almost necessary for services. Everyone does things fromtheir phone now, as not everyone wants to bring a laptop around everywhere they go. Websites are not built for mobile devices. Yes, there is responsive web design, butthat does not beat the usefulness of an app that you can just click from your homescreen. Thus, apps are a necessity. So let’s say you built a backend specific for your app. Great! But how about if youneed to deal with other platforms? For example, smart watches or smart TVs. You needto build a whole new app that may have a completely different interface. To make thiseasier, you can create an API which will make it easy to interface with your website.You can even expose this API to developers to increase adoption of your product. However, now you have this website that you simultaneously have to maintain. Everynew feature of the website has its own rendering mechanism completely separate fromthe REST API. The features of the REST API aren’t synchronized with your website. Here’s where frameworks like Angular come in. Angular can be like a mobile app,dealing directly with your API. When you build a new feature on your website, youcan also build the logic into your API, causing you to only have to write your codeONCE. Now you don’t have to worry about supporting certain operations on multipleplatforms, as you have one backend that handles all of the platforms. JSON-based backends are awesome. Logic is written once, and all you have to worry aboutis how your data is displayed. You can still support multiple platforms, but you onlyneed to write your backend logic once, as JSON is ubiquitous.","raw":null,"content":null,"categories":[{"name":"Web","slug":"Web","permalink":"https://simplyian.com/categories/Web/"}],"tags":[]},{"title":"How to Have Language-Specific Settings in Vim","slug":"how-to-have-language-specific-settings-in-vim","date":"2014-04-29T01:50:27.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/04/28/how-to-have-language-specific-settings-in-vim/","link":"","permalink":"https://simplyian.com/2014/04/28/how-to-have-language-specific-settings-in-vim/","excerpt":"","text":"I wanted to set up Vim so that Coffeescript files would use 2 spaces for indentation. This was very simple: Create a file at ~/.vim/ftplugin/&lt;language&gt;.vim where &lt;language&gt; is the language you want to modify. For Coffeescript, this is coffee. The language name you should use is just the file extension. In this file, add your settings. In my coffee.vim, I have setlocal tabstop=2 and setlocal shiftwidth=2 to make my tabs 2 spaces. Open up a file in that language and enjoy your language specific settings!","raw":null,"content":null,"categories":[{"name":"Vim","slug":"Vim","permalink":"https://simplyian.com/categories/Vim/"}],"tags":[]},{"title":"Setting up Virtual Hosts in Apache","slug":"setting-up-virtual-hosts-in-apache","date":"2014-04-16T04:17:35.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/04/15/setting-up-virtual-hosts-in-apache/","link":"","permalink":"https://simplyian.com/2014/04/15/setting-up-virtual-hosts-in-apache/","excerpt":"","text":"Today, I wanted to put my downloads on a different domain from my screenshots. Not wanting to manage multiple servers for no reason, I set up virtual hosts, also known as vhosts. Basically, depending on what domain you visit my web server from, you will get a different website. This is actually very simple to set up. First, navigate to your apache2 directory and go to the sites-available directory within it. On my Debian system, this is at /etc/apache2/sites-available/. In this directory, you’ll see a bunch of files. Each one of these files is a config file that can be enabled or disabled individually; this is called a site. To set up vhosting, you should first disable the default website. Use the command sudo a2dissite default to do this. Next, add the rest of your websites. Here is the very simple config file I use: 123456789&lt;VirtualHost *:80&gt; ServerName domain.you.want.to.use.com DocumentRoot /var/www/sitefiles/ &lt;Directory /var/www/sitefiles/&gt; Options Indexes FollowSymLinks MultiViews Order allow,deny Allow from all &lt;/Directory&gt;&lt;/VirtualHost&gt; Save this to a file with the name of the site, no extension. I named my site screenshots for example. Obviously, replace domain.you.want.to.use.com with the domain you want to use for the website. (For my screenshot website, this is s.giza.us.) The document root is the folder that contains the files at the root of your website. For me that’s /var/www/screenshots. Lastly, type sudo a2ensite sitename where sitename is whatever you named that file. Then, restart apache with sudo service apache2 restart, and all is well. For any additional domains, create more config files with that information, replacing all of the relevant stuff. Enjoy your awesome new vhosted website!","raw":null,"content":null,"categories":[{"name":"Apache","slug":"Apache","permalink":"https://simplyian.com/categories/Apache/"},{"name":"Linux","slug":"Apache/Linux","permalink":"https://simplyian.com/categories/Apache/Linux/"}],"tags":[]},{"title":"Including Dependencies in Your Gradle Build Script's Classpath","slug":"including-dependencies-in-your-gradle-build-scripts-classpath","date":"2014-04-11T04:00:18.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/04/10/including-dependencies-in-your-gradle-build-scripts-classpath/","link":"","permalink":"https://simplyian.com/2014/04/10/including-dependencies-in-your-gradle-build-scripts-classpath/","excerpt":"","text":"In a recent project, I wanted to use SnakeYAML in my Gradle build script. This is pretty easy to do; all you have to do is add the following to your script: 1234567891011buildscript &#123; repositories &#123; mavenCentral() // ...etc &#125; dependencies &#123; classpath group: 'org.yaml', name: 'snakeyaml', version: '1.5' // ..etc &#125;&#125; This is the same as the repositories {} and dependencies {} sections of the build script. After doing this, feel free to use your libraries anywhere in your build script. Don’t forget to import the classes you use!","raw":null,"content":null,"categories":[{"name":"Gradle","slug":"Gradle","permalink":"https://simplyian.com/categories/Gradle/"}],"tags":[]},{"title":"Adding a Provided JAR as a Dependency in a Gradle Project","slug":"adding-a-provided-jar-as-a-dependency-in-a-gradle-project","date":"2014-04-05T04:39:12.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/04/04/adding-a-provided-jar-as-a-dependency-in-a-gradle-project/","link":"","permalink":"https://simplyian.com/2014/04/04/adding-a-provided-jar-as-a-dependency-in-a-gradle-project/","excerpt":"","text":"Adding a JAR as a dependency is simple in Gradle. In your dependencies {}, add the following line: 1compile files('file.jar') Where file.jar is the path to the JAR from the root directory of the repository. For example, if I had Dependency.jar at ./libs/Dependency.jar, I would use compile files(&#39;libs/Dependency.jar&#39;).","raw":null,"content":null,"categories":[{"name":"Gradle","slug":"Gradle","permalink":"https://simplyian.com/categories/Gradle/"},{"name":"Java","slug":"Gradle/Java","permalink":"https://simplyian.com/categories/Gradle/Java/"}],"tags":[]},{"title":"up - A Useful File Sharing Tool Using SCP","slug":"up-a-useful-file-sharing-tool-using-scp","date":"2014-04-03T04:18:26.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/04/02/up-a-useful-file-sharing-tool-using-scp/","link":"","permalink":"https://simplyian.com/2014/04/02/up-a-useful-file-sharing-tool-using-scp/","excerpt":"","text":"I created a tool today called up. Although it’s really simple, it gets the job done and it’s really useful. Basically, to share a file, you just type up MyFile and it will upload that file to your remote server, returning the URL it is hosted at.","raw":null,"content":null,"categories":[{"name":"Linux","slug":"Linux","permalink":"https://simplyian.com/categories/Linux/"}],"tags":[]},{"title":"How to Run a Command on Startup on Linux","slug":"how-to-run-a-command-on-startup-on-linux","date":"2014-04-02T04:43:26.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/04/01/how-to-run-a-command-on-startup-on-linux/","link":"","permalink":"https://simplyian.com/2014/04/01/how-to-run-a-command-on-startup-on-linux/","excerpt":"","text":"I recently purchased a VPS to run my IRC client in. I wanted to start my IRC client in tmux on startup. The answer is simple: crontabs. Run the following command on the user you want to run the command on: 1crontab -e This will open up the crontab of your current user. A crontab is basically a file stating a bunch of tasks that you want to run on some sort of schedule. Next, add the following text to the file: 1@reboot &lt;command&gt; where &lt;command&gt; is, of course, the command you want to run. For example, on boot, I run a shell script that starts up my tmux stuff, so I have @reboot /usr/ian/tmux_start.sh. Pretty simple, right? Crontabs have a lot more uses that you can probably find on Google. Source: man cron and man crontab.","raw":null,"content":null,"categories":[{"name":"Linux","slug":"Linux","permalink":"https://simplyian.com/categories/Linux/"}],"tags":[]},{"title":"How to Change the Name of the JAR Produced in Gradle","slug":"how-to-change-the-name-of-the-jar-produced-in-gradle","date":"2014-04-01T04:19:07.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/31/how-to-change-the-name-of-the-jar-produced-in-gradle/","link":"","permalink":"https://simplyian.com/2014/03/31/how-to-change-the-name-of-the-jar-produced-in-gradle/","excerpt":"","text":"I don’t like the traditional JAR name assigned in Gradle. In Bukkit development, you usually make the JAR name the same as the plugin name. Here’s how you set the name of the JAR: 1jar.baseName = 'JarName' Where JarName would be the name of the jar generated in build/libs/. Source: StackOverflow","raw":null,"content":null,"categories":[{"name":"Gradle","slug":"Gradle","permalink":"https://simplyian.com/categories/Gradle/"}],"tags":[]},{"title":"How to Run a Specific Class Inside of a JAR","slug":"how-to-run-a-specific-class-inside-of-a-jar","date":"2014-03-31T01:34:47.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/30/how-to-run-a-specific-class-inside-of-a-jar/","link":"","permalink":"https://simplyian.com/2014/03/30/how-to-run-a-specific-class-inside-of-a-jar/","excerpt":"","text":"My friend wanted me to test out his program, but it didn’t have a main class specified in the manifest. Here’s the solution: 1java -cp yourjar.jar com.yourpackage.YourClass This will run the specified class as the main class. Source: StackOverflow","raw":null,"content":null,"categories":[{"name":"Java","slug":"Java","permalink":"https://simplyian.com/categories/Java/"}],"tags":[]},{"title":"Using Tmux Remotely Within a Local Tmux Session","slug":"using-tmux-remotely-within-a-local-tmux-session","date":"2014-03-29T10:40:53.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/29/using-tmux-remotely-within-a-local-tmux-session/","link":"","permalink":"https://simplyian.com/2014/03/29/using-tmux-remotely-within-a-local-tmux-session/","excerpt":"","text":"I often SSH to remote servers, and those servers usually have tmux installed. (tmux is better than Screen in every way) However, conflicts arise when you want to manipulate a remote tmux session within a local one. Ctrl-B refers to the local tmux session, not the remote one, and you have to press Ctrl-B twice to manipulate the remote one. This is pretty annoying. Fortunately, there is a solution to this. There is one line you need to add to your ~/.tmux.conf (if this file doesn’t exist, create it): 1bind-key -n C-a send-prefix This binds the command send-prefix to Ctrl-A. Basically, you are sending a Ctrl-B (assuming you’ve left tmux at its defaults) directly to the server when you press Ctrl-A. This will let you manipulate the remote session with Ctrl-A and still use your local session with Ctrl-B. Pretty nice, eh? Source: StackOverflow","raw":null,"content":null,"categories":[{"name":"tmux","slug":"tmux","permalink":"https://simplyian.com/categories/tmux/"}],"tags":[]},{"title":"How to Change the Theme of the XFCE Terminal","slug":"how-to-change-the-theme-of-the-xfce-terminal","date":"2014-03-29T10:20:52.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/29/how-to-change-the-theme-of-the-xfce-terminal/","link":"","permalink":"https://simplyian.com/2014/03/29/how-to-change-the-theme-of-the-xfce-terminal/","excerpt":"","text":"I use XFCE as my primary desktop environment. It’s a fast, lightweight operating system that when combined with Synapse provides a great, lag-free computing experience. As a typical developer and Linux user, I use the terminal quite a bit. XFCE’s terminal emulator has a pretty bland default theme. There is an awesome repository called Base16 that provides a wide selection of themes for the terminal. To install one of these themes, you need ensure the existence of the directory ~/.config/Terminal/. Then, run the following command: 1curl -L https://raw.githubusercontent.com/chriskempson/base16-xfce4-terminal/master/base16-default.dark.terminalrc &gt; ~/.config/Terminal/terminalrc Replace the URL with the raw of whatever theme you want to use. Check out the Base16 website to preview all available themes. The changes should take effect next time you run a command; if not, just restart the terminal. These themes are a huge step up compared to the default. Personally, I use the “Bright” theme. Have fun with a nice looking terminal!","raw":null,"content":null,"categories":[{"name":"XFCE","slug":"XFCE","permalink":"https://simplyian.com/categories/XFCE/"}],"tags":[]},{"title":"Making Powerline Work With Tmux And ZSH","slug":"making-powerline-work-with-tmux-and-zsh","date":"2014-03-29T07:45:17.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/29/making-powerline-work-with-tmux-and-zsh/","link":"","permalink":"https://simplyian.com/2014/03/29/making-powerline-work-with-tmux-and-zsh/","excerpt":"","text":"After hearing good things about Powerline for a while, today I finally decided to install Powerline on tmux. However, it didn’t work when I followed the directions. Apparently, this is a common error. To get it working, I placed the following in my ~/.tmux.conf, in addition to sourceing the powerline.conf: 1set -g status-right '#(.local/bin/powerline tmux right)' Basically, tmux does not load the PATH variable in your .zshrc. Therefore, you have to specify the path that powerline is installed at in your ~/.tmux.conf. If this does not work, you can also try this: 1tmux set -g status-right '#(/usr/local/share/python/powerline tmux right)' This uses powerline if you installed it as root. Source: an issue on the Github Powerline repository","raw":null,"content":null,"categories":[{"name":"zsh","slug":"zsh","permalink":"https://simplyian.com/categories/zsh/"},{"name":"Powerline","slug":"zsh/Powerline","permalink":"https://simplyian.com/categories/zsh/Powerline/"}],"tags":[]},{"title":"Using Powerline Symbols With ZSH","slug":"using-powerline-symbols-with-your-current-font","date":"2014-03-29T03:26:13.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/28/using-powerline-symbols-with-your-current-font/","link":"","permalink":"https://simplyian.com/2014/03/28/using-powerline-symbols-with-your-current-font/","excerpt":"","text":"Recently, I tried to install the agnoster theme with zsh. However, a bunch of symbols appeared instead of the powerline font. I installed one of the provided patched powerline fonts to fix it, but it still didn’t work. I did a bit of Googling and found that I needed to install the PowerlineSymbols font, which is basically a font that just adds on to your current font. Here’s the steps I took to get things working. Download PowerlineSymbols.otf to your ~/.fonts/ directory using curl https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf -LO Run fc-cache -vf ~/.fonts to refresh the font cache and thus install the font. Download 10-powerline-symbols.conf to your ~/.config/fontconfig/conf.d/ using curl https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf -LO Once you’ve done things, this should work. If not, you may need to restart your terminal or even your entire computer. You can also change your theme to the agnoster theme by changing your theme in your ~/.zshrc. Source: Powerline documentation","raw":null,"content":null,"categories":[{"name":"zsh","slug":"zsh","permalink":"https://simplyian.com/categories/zsh/"}],"tags":[]},{"title":"Multiple Virtual Monitors with Virtualbox and XFCE","slug":"multiple-virtual-monitors-with-virtualbox-and-xfce","date":"2014-03-28T00:31:52.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/27/multiple-virtual-monitors-with-virtualbox-and-xfce/","link":"","permalink":"https://simplyian.com/2014/03/27/multiple-virtual-monitors-with-virtualbox-and-xfce/","excerpt":"","text":"I love VirtualBox. I need Windows in order to run some programs (read: games) so VirtualBox lets me run Linux when I need it. Sometimes, I need to use more screen space — I want a terminal on one window and my web browser/IDE on the other. First of all, you want to go to your VM’s settings and increase the monitor amount. You can only do this when the VM is shut down. Once that’s done, fire up your VM and log in. Notice that there are now multiple VirtualBox windows running your VM. To double check this, go to Start &gt; Settings &gt; Settings Manager and choose Display. Make sure the Use this output box is checked. Next, open a terminal and run the following command: xrandr You should see a list of your virtual monitors, labeled VBOX0 and VBOX1. If you don’t see them, try changing your display settigns again. Next, type the following command to extend your desktop to both monitors: xrandr --output VBOX0 --left-of VBOX1 Now you have your multi-monitor desktop. However, this will not persist after rebooting. Go to Start &gt; Settings &gt; Settings Manager &gt; Session and Startup, click on Application Autostart, click Add, then add the command in the dialog box. Now when you reboot, you should have your awesome dual monitors! I did not figure this out on my own. I found the answer on an Ask Ubuntu post.","raw":null,"content":null,"categories":[{"name":"VirtualBox","slug":"VirtualBox","permalink":"https://simplyian.com/categories/VirtualBox/"},{"name":"XFCE","slug":"VirtualBox/XFCE","permalink":"https://simplyian.com/categories/VirtualBox/XFCE/"}],"tags":[]},{"title":"Why I'm Restarting My Blog","slug":"why-im-restarting-my-blog","date":"2014-03-27T23:59:18.000Z","updated":"2015-04-23T19:03:16.000Z","comments":true,"path":"2014/03/27/why-im-restarting-my-blog/","link":"","permalink":"https://simplyian.com/2014/03/27/why-im-restarting-my-blog/","excerpt":"","text":"Today, I’ve decided I’m going to restart my blog. This blog used to be a place where I talked about random things that I found cool, interesting, random, frustrating, or anything really. I’ve moved on from this blog since I entered high school, and now I’m wishing that I had it again. I’m restarting the blog mainly for these reasons: To improve my writing skills. I write terribly, and I always have. I hope this blog will enable me to start writing cohesively. To express my growing knowledge. I don’t know many people who are interested in things like Linux or Java. The friends I do have that are interested in that stuff certainly are not interested in me explaining how that stuff works. Instead, I’ll be blogging to people who are interested in my content. Talking about something I’ve learned also lets me learn the topic better myself. To make myself more productive. I’ve recently become addicted to gaming (Titanfall, League of Legends, etc.) and I want to stop playing so much. Writing about programming will hopefully make me program more. I’m hoping to be able to blog daily and at least every 3 days. I really hope this blog ends up fulfilling all of my goals.","raw":null,"content":null,"categories":[{"name":"Meta","slug":"Meta","permalink":"https://simplyian.com/categories/Meta/"}],"tags":[]}]}